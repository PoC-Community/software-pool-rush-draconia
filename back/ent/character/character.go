// Code generated by ent, DO NOT EDIT.

package character

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the character type in the database.
	Label = "character"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCombat holds the string denoting the combat field in the database.
	FieldCombat = "combat"
	// FieldConnaissance holds the string denoting the connaissance field in the database.
	FieldConnaissance = "connaissance"
	// FieldDiscretion holds the string denoting the discretion field in the database.
	FieldDiscretion = "discretion"
	// FieldEndurance holds the string denoting the endurance field in the database.
	FieldEndurance = "endurance"
	// FieldForce holds the string denoting the force field in the database.
	FieldForce = "force"
	// FieldHabilite holds the string denoting the habilite field in the database.
	FieldHabilite = "habilite"
	// FieldMouvement holds the string denoting the mouvement field in the database.
	FieldMouvement = "mouvement"
	// FieldPerception holds the string denoting the perception field in the database.
	FieldPerception = "perception"
	// FieldSociabilite holds the string denoting the sociabilite field in the database.
	FieldSociabilite = "sociabilite"
	// FieldSurvie holds the string denoting the survie field in the database.
	FieldSurvie = "survie"
	// FieldTir holds the string denoting the tir field in the database.
	FieldTir = "tir"
	// FieldVolonte holds the string denoting the volonte field in the database.
	FieldVolonte = "volonte"
	// FieldExp holds the string denoting the exp field in the database.
	FieldExp = "exp"
	// FieldArmesHast holds the string denoting the armes_hast field in the database.
	FieldArmesHast = "armes_hast"
	// FieldArmesMoine holds the string denoting the armes_moine field in the database.
	FieldArmesMoine = "armes_moine"
	// FieldArmesDoubles holds the string denoting the armes_doubles field in the database.
	FieldArmesDoubles = "armes_doubles"
	// FieldArmesNaturelles holds the string denoting the armes_naturelles field in the database.
	FieldArmesNaturelles = "armes_naturelles"
	// FieldBatons holds the string denoting the batons field in the database.
	FieldBatons = "batons"
	// FieldCimeterres holds the string denoting the cimeterres field in the database.
	FieldCimeterres = "cimeterres"
	// FieldFleaux holds the string denoting the fleaux field in the database.
	FieldFleaux = "fleaux"
	// FieldFouets holds the string denoting the fouets field in the database.
	FieldFouets = "fouets"
	// FieldHaches holds the string denoting the haches field in the database.
	FieldHaches = "haches"
	// FieldKatanas holds the string denoting the katanas field in the database.
	FieldKatanas = "katanas"
	// FieldLamesLegeres holds the string denoting the lames_legeres field in the database.
	FieldLamesLegeres = "lames_legeres"
	// FieldLamesLourdes holds the string denoting the lames_lourdes field in the database.
	FieldLamesLourdes = "lames_lourdes"
	// FieldLances holds the string denoting the lances field in the database.
	FieldLances = "lances"
	// FieldMarteaux holds the string denoting the marteaux field in the database.
	FieldMarteaux = "marteaux"
	// FieldMainsNues holds the string denoting the mains_nues field in the database.
	FieldMainsNues = "mains_nues"
	// FieldMysteres holds the string denoting the mysteres field in the database.
	FieldMysteres = "mysteres"
	// FieldExplorationSouterraine holds the string denoting the exploration_souterraine field in the database.
	FieldExplorationSouterraine = "exploration_souterraine"
	// FieldIngenierie holds the string denoting the ingenierie field in the database.
	FieldIngenierie = "ingenierie"
	// FieldGeographie holds the string denoting the geographie field in the database.
	FieldGeographie = "geographie"
	// FieldHistoire holds the string denoting the histoire field in the database.
	FieldHistoire = "histoire"
	// FieldFolklore holds the string denoting the folklore field in the database.
	FieldFolklore = "folklore"
	// FieldNature holds the string denoting the nature field in the database.
	FieldNature = "nature"
	// FieldNoblesse holds the string denoting the noblesse field in the database.
	FieldNoblesse = "noblesse"
	// FieldPlans holds the string denoting the plans field in the database.
	FieldPlans = "plans"
	// FieldReligon holds the string denoting the religon field in the database.
	FieldReligon = "religon"
	// FieldAnatomie holds the string denoting the anatomie field in the database.
	FieldAnatomie = "anatomie"
	// FieldMagieTheorique holds the string denoting the magie_theorique field in the database.
	FieldMagieTheorique = "magie_theorique"
	// FieldEconomie holds the string denoting the economie field in the database.
	FieldEconomie = "economie"
	// FieldLinguistique holds the string denoting the linguistique field in the database.
	FieldLinguistique = "linguistique"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the character in the database.
	Table = "characters"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "characters"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_characters"
)

// Columns holds all SQL columns for character fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCombat,
	FieldConnaissance,
	FieldDiscretion,
	FieldEndurance,
	FieldForce,
	FieldHabilite,
	FieldMouvement,
	FieldPerception,
	FieldSociabilite,
	FieldSurvie,
	FieldTir,
	FieldVolonte,
	FieldExp,
	FieldArmesHast,
	FieldArmesMoine,
	FieldArmesDoubles,
	FieldArmesNaturelles,
	FieldBatons,
	FieldCimeterres,
	FieldFleaux,
	FieldFouets,
	FieldHaches,
	FieldKatanas,
	FieldLamesLegeres,
	FieldLamesLourdes,
	FieldLances,
	FieldMarteaux,
	FieldMainsNues,
	FieldMysteres,
	FieldExplorationSouterraine,
	FieldIngenierie,
	FieldGeographie,
	FieldHistoire,
	FieldFolklore,
	FieldNature,
	FieldNoblesse,
	FieldPlans,
	FieldReligon,
	FieldAnatomie,
	FieldMagieTheorique,
	FieldEconomie,
	FieldLinguistique,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "characters"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_characters",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CombatValidator is a validator for the "combat" field. It is called by the builders before save.
	CombatValidator func(int) error
	// ConnaissanceValidator is a validator for the "connaissance" field. It is called by the builders before save.
	ConnaissanceValidator func(int) error
	// DiscretionValidator is a validator for the "discretion" field. It is called by the builders before save.
	DiscretionValidator func(int) error
	// EnduranceValidator is a validator for the "endurance" field. It is called by the builders before save.
	EnduranceValidator func(int) error
	// ForceValidator is a validator for the "force" field. It is called by the builders before save.
	ForceValidator func(int) error
	// HabiliteValidator is a validator for the "habilite" field. It is called by the builders before save.
	HabiliteValidator func(int) error
	// MouvementValidator is a validator for the "mouvement" field. It is called by the builders before save.
	MouvementValidator func(int) error
	// PerceptionValidator is a validator for the "perception" field. It is called by the builders before save.
	PerceptionValidator func(int) error
	// SociabiliteValidator is a validator for the "sociabilite" field. It is called by the builders before save.
	SociabiliteValidator func(int) error
	// SurvieValidator is a validator for the "survie" field. It is called by the builders before save.
	SurvieValidator func(int) error
	// TirValidator is a validator for the "tir" field. It is called by the builders before save.
	TirValidator func(int) error
	// VolonteValidator is a validator for the "volonte" field. It is called by the builders before save.
	VolonteValidator func(int) error
	// ExpValidator is a validator for the "exp" field. It is called by the builders before save.
	ExpValidator func(int) error
	// ArmesHastValidator is a validator for the "armes_hast" field. It is called by the builders before save.
	ArmesHastValidator func(int) error
	// ArmesMoineValidator is a validator for the "armes_moine" field. It is called by the builders before save.
	ArmesMoineValidator func(int) error
	// ArmesDoublesValidator is a validator for the "armes_doubles" field. It is called by the builders before save.
	ArmesDoublesValidator func(int) error
	// ArmesNaturellesValidator is a validator for the "armes_naturelles" field. It is called by the builders before save.
	ArmesNaturellesValidator func(int) error
	// BatonsValidator is a validator for the "batons" field. It is called by the builders before save.
	BatonsValidator func(int) error
	// CimeterresValidator is a validator for the "cimeterres" field. It is called by the builders before save.
	CimeterresValidator func(int) error
	// FleauxValidator is a validator for the "fleaux" field. It is called by the builders before save.
	FleauxValidator func(int) error
	// FouetsValidator is a validator for the "fouets" field. It is called by the builders before save.
	FouetsValidator func(int) error
	// HachesValidator is a validator for the "haches" field. It is called by the builders before save.
	HachesValidator func(int) error
	// KatanasValidator is a validator for the "katanas" field. It is called by the builders before save.
	KatanasValidator func(int) error
	// LamesLegeresValidator is a validator for the "lames_legeres" field. It is called by the builders before save.
	LamesLegeresValidator func(int) error
	// LamesLourdesValidator is a validator for the "lames_lourdes" field. It is called by the builders before save.
	LamesLourdesValidator func(int) error
	// LancesValidator is a validator for the "lances" field. It is called by the builders before save.
	LancesValidator func(int) error
	// MarteauxValidator is a validator for the "marteaux" field. It is called by the builders before save.
	MarteauxValidator func(int) error
	// MainsNuesValidator is a validator for the "mains_nues" field. It is called by the builders before save.
	MainsNuesValidator func(int) error
	// MysteresValidator is a validator for the "mysteres" field. It is called by the builders before save.
	MysteresValidator func(int) error
	// ExplorationSouterraineValidator is a validator for the "exploration_souterraine" field. It is called by the builders before save.
	ExplorationSouterraineValidator func(int) error
	// IngenierieValidator is a validator for the "ingenierie" field. It is called by the builders before save.
	IngenierieValidator func(int) error
	// GeographieValidator is a validator for the "geographie" field. It is called by the builders before save.
	GeographieValidator func(int) error
	// HistoireValidator is a validator for the "histoire" field. It is called by the builders before save.
	HistoireValidator func(int) error
	// FolkloreValidator is a validator for the "folklore" field. It is called by the builders before save.
	FolkloreValidator func(int) error
	// NatureValidator is a validator for the "nature" field. It is called by the builders before save.
	NatureValidator func(int) error
	// NoblesseValidator is a validator for the "noblesse" field. It is called by the builders before save.
	NoblesseValidator func(int) error
	// PlansValidator is a validator for the "plans" field. It is called by the builders before save.
	PlansValidator func(int) error
	// ReligonValidator is a validator for the "religon" field. It is called by the builders before save.
	ReligonValidator func(int) error
	// AnatomieValidator is a validator for the "anatomie" field. It is called by the builders before save.
	AnatomieValidator func(int) error
	// MagieTheoriqueValidator is a validator for the "magie_theorique" field. It is called by the builders before save.
	MagieTheoriqueValidator func(int) error
	// EconomieValidator is a validator for the "economie" field. It is called by the builders before save.
	EconomieValidator func(int) error
	// LinguistiqueValidator is a validator for the "linguistique" field. It is called by the builders before save.
	LinguistiqueValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
