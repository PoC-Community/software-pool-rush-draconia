// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"draconia/ent/character"
	"draconia/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CharacterUpdate is the builder for updating Character entities.
type CharacterUpdate struct {
	config
	hooks    []Hook
	mutation *CharacterMutation
}

// Where appends a list predicates to the CharacterUpdate builder.
func (cu *CharacterUpdate) Where(ps ...predicate.Character) *CharacterUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CharacterUpdate) SetName(s string) *CharacterUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetCombat sets the "combat" field.
func (cu *CharacterUpdate) SetCombat(i int) *CharacterUpdate {
	cu.mutation.ResetCombat()
	cu.mutation.SetCombat(i)
	return cu
}

// AddCombat adds i to the "combat" field.
func (cu *CharacterUpdate) AddCombat(i int) *CharacterUpdate {
	cu.mutation.AddCombat(i)
	return cu
}

// SetConnaissance sets the "connaissance" field.
func (cu *CharacterUpdate) SetConnaissance(i int) *CharacterUpdate {
	cu.mutation.ResetConnaissance()
	cu.mutation.SetConnaissance(i)
	return cu
}

// AddConnaissance adds i to the "connaissance" field.
func (cu *CharacterUpdate) AddConnaissance(i int) *CharacterUpdate {
	cu.mutation.AddConnaissance(i)
	return cu
}

// SetDiscretion sets the "discretion" field.
func (cu *CharacterUpdate) SetDiscretion(i int) *CharacterUpdate {
	cu.mutation.ResetDiscretion()
	cu.mutation.SetDiscretion(i)
	return cu
}

// AddDiscretion adds i to the "discretion" field.
func (cu *CharacterUpdate) AddDiscretion(i int) *CharacterUpdate {
	cu.mutation.AddDiscretion(i)
	return cu
}

// SetEndurance sets the "endurance" field.
func (cu *CharacterUpdate) SetEndurance(i int) *CharacterUpdate {
	cu.mutation.ResetEndurance()
	cu.mutation.SetEndurance(i)
	return cu
}

// AddEndurance adds i to the "endurance" field.
func (cu *CharacterUpdate) AddEndurance(i int) *CharacterUpdate {
	cu.mutation.AddEndurance(i)
	return cu
}

// SetForce sets the "force" field.
func (cu *CharacterUpdate) SetForce(i int) *CharacterUpdate {
	cu.mutation.ResetForce()
	cu.mutation.SetForce(i)
	return cu
}

// AddForce adds i to the "force" field.
func (cu *CharacterUpdate) AddForce(i int) *CharacterUpdate {
	cu.mutation.AddForce(i)
	return cu
}

// SetHabilite sets the "habilite" field.
func (cu *CharacterUpdate) SetHabilite(i int) *CharacterUpdate {
	cu.mutation.ResetHabilite()
	cu.mutation.SetHabilite(i)
	return cu
}

// AddHabilite adds i to the "habilite" field.
func (cu *CharacterUpdate) AddHabilite(i int) *CharacterUpdate {
	cu.mutation.AddHabilite(i)
	return cu
}

// SetMouvement sets the "mouvement" field.
func (cu *CharacterUpdate) SetMouvement(i int) *CharacterUpdate {
	cu.mutation.ResetMouvement()
	cu.mutation.SetMouvement(i)
	return cu
}

// AddMouvement adds i to the "mouvement" field.
func (cu *CharacterUpdate) AddMouvement(i int) *CharacterUpdate {
	cu.mutation.AddMouvement(i)
	return cu
}

// SetPerception sets the "perception" field.
func (cu *CharacterUpdate) SetPerception(i int) *CharacterUpdate {
	cu.mutation.ResetPerception()
	cu.mutation.SetPerception(i)
	return cu
}

// AddPerception adds i to the "perception" field.
func (cu *CharacterUpdate) AddPerception(i int) *CharacterUpdate {
	cu.mutation.AddPerception(i)
	return cu
}

// SetSociabilite sets the "sociabilite" field.
func (cu *CharacterUpdate) SetSociabilite(i int) *CharacterUpdate {
	cu.mutation.ResetSociabilite()
	cu.mutation.SetSociabilite(i)
	return cu
}

// AddSociabilite adds i to the "sociabilite" field.
func (cu *CharacterUpdate) AddSociabilite(i int) *CharacterUpdate {
	cu.mutation.AddSociabilite(i)
	return cu
}

// SetSurvie sets the "survie" field.
func (cu *CharacterUpdate) SetSurvie(i int) *CharacterUpdate {
	cu.mutation.ResetSurvie()
	cu.mutation.SetSurvie(i)
	return cu
}

// AddSurvie adds i to the "survie" field.
func (cu *CharacterUpdate) AddSurvie(i int) *CharacterUpdate {
	cu.mutation.AddSurvie(i)
	return cu
}

// SetTir sets the "tir" field.
func (cu *CharacterUpdate) SetTir(i int) *CharacterUpdate {
	cu.mutation.ResetTir()
	cu.mutation.SetTir(i)
	return cu
}

// AddTir adds i to the "tir" field.
func (cu *CharacterUpdate) AddTir(i int) *CharacterUpdate {
	cu.mutation.AddTir(i)
	return cu
}

// SetVolonte sets the "volonte" field.
func (cu *CharacterUpdate) SetVolonte(i int) *CharacterUpdate {
	cu.mutation.ResetVolonte()
	cu.mutation.SetVolonte(i)
	return cu
}

// AddVolonte adds i to the "volonte" field.
func (cu *CharacterUpdate) AddVolonte(i int) *CharacterUpdate {
	cu.mutation.AddVolonte(i)
	return cu
}

// SetExp sets the "exp" field.
func (cu *CharacterUpdate) SetExp(i int) *CharacterUpdate {
	cu.mutation.ResetExp()
	cu.mutation.SetExp(i)
	return cu
}

// AddExp adds i to the "exp" field.
func (cu *CharacterUpdate) AddExp(i int) *CharacterUpdate {
	cu.mutation.AddExp(i)
	return cu
}

// SetArmesHast sets the "armes_hast" field.
func (cu *CharacterUpdate) SetArmesHast(i int) *CharacterUpdate {
	cu.mutation.ResetArmesHast()
	cu.mutation.SetArmesHast(i)
	return cu
}

// AddArmesHast adds i to the "armes_hast" field.
func (cu *CharacterUpdate) AddArmesHast(i int) *CharacterUpdate {
	cu.mutation.AddArmesHast(i)
	return cu
}

// SetArmesMoine sets the "armes_moine" field.
func (cu *CharacterUpdate) SetArmesMoine(i int) *CharacterUpdate {
	cu.mutation.ResetArmesMoine()
	cu.mutation.SetArmesMoine(i)
	return cu
}

// AddArmesMoine adds i to the "armes_moine" field.
func (cu *CharacterUpdate) AddArmesMoine(i int) *CharacterUpdate {
	cu.mutation.AddArmesMoine(i)
	return cu
}

// SetArmesDoubles sets the "armes_doubles" field.
func (cu *CharacterUpdate) SetArmesDoubles(i int) *CharacterUpdate {
	cu.mutation.ResetArmesDoubles()
	cu.mutation.SetArmesDoubles(i)
	return cu
}

// AddArmesDoubles adds i to the "armes_doubles" field.
func (cu *CharacterUpdate) AddArmesDoubles(i int) *CharacterUpdate {
	cu.mutation.AddArmesDoubles(i)
	return cu
}

// SetArmesNaturelles sets the "armes_naturelles" field.
func (cu *CharacterUpdate) SetArmesNaturelles(i int) *CharacterUpdate {
	cu.mutation.ResetArmesNaturelles()
	cu.mutation.SetArmesNaturelles(i)
	return cu
}

// AddArmesNaturelles adds i to the "armes_naturelles" field.
func (cu *CharacterUpdate) AddArmesNaturelles(i int) *CharacterUpdate {
	cu.mutation.AddArmesNaturelles(i)
	return cu
}

// SetBatons sets the "batons" field.
func (cu *CharacterUpdate) SetBatons(i int) *CharacterUpdate {
	cu.mutation.ResetBatons()
	cu.mutation.SetBatons(i)
	return cu
}

// AddBatons adds i to the "batons" field.
func (cu *CharacterUpdate) AddBatons(i int) *CharacterUpdate {
	cu.mutation.AddBatons(i)
	return cu
}

// SetCimeterres sets the "cimeterres" field.
func (cu *CharacterUpdate) SetCimeterres(i int) *CharacterUpdate {
	cu.mutation.ResetCimeterres()
	cu.mutation.SetCimeterres(i)
	return cu
}

// AddCimeterres adds i to the "cimeterres" field.
func (cu *CharacterUpdate) AddCimeterres(i int) *CharacterUpdate {
	cu.mutation.AddCimeterres(i)
	return cu
}

// SetFleaux sets the "fleaux" field.
func (cu *CharacterUpdate) SetFleaux(i int) *CharacterUpdate {
	cu.mutation.ResetFleaux()
	cu.mutation.SetFleaux(i)
	return cu
}

// AddFleaux adds i to the "fleaux" field.
func (cu *CharacterUpdate) AddFleaux(i int) *CharacterUpdate {
	cu.mutation.AddFleaux(i)
	return cu
}

// SetFouets sets the "fouets" field.
func (cu *CharacterUpdate) SetFouets(i int) *CharacterUpdate {
	cu.mutation.ResetFouets()
	cu.mutation.SetFouets(i)
	return cu
}

// AddFouets adds i to the "fouets" field.
func (cu *CharacterUpdate) AddFouets(i int) *CharacterUpdate {
	cu.mutation.AddFouets(i)
	return cu
}

// SetHaches sets the "haches" field.
func (cu *CharacterUpdate) SetHaches(i int) *CharacterUpdate {
	cu.mutation.ResetHaches()
	cu.mutation.SetHaches(i)
	return cu
}

// AddHaches adds i to the "haches" field.
func (cu *CharacterUpdate) AddHaches(i int) *CharacterUpdate {
	cu.mutation.AddHaches(i)
	return cu
}

// SetKatanas sets the "katanas" field.
func (cu *CharacterUpdate) SetKatanas(i int) *CharacterUpdate {
	cu.mutation.ResetKatanas()
	cu.mutation.SetKatanas(i)
	return cu
}

// AddKatanas adds i to the "katanas" field.
func (cu *CharacterUpdate) AddKatanas(i int) *CharacterUpdate {
	cu.mutation.AddKatanas(i)
	return cu
}

// SetLamesLegeres sets the "lames_legeres" field.
func (cu *CharacterUpdate) SetLamesLegeres(i int) *CharacterUpdate {
	cu.mutation.ResetLamesLegeres()
	cu.mutation.SetLamesLegeres(i)
	return cu
}

// AddLamesLegeres adds i to the "lames_legeres" field.
func (cu *CharacterUpdate) AddLamesLegeres(i int) *CharacterUpdate {
	cu.mutation.AddLamesLegeres(i)
	return cu
}

// SetLamesLourdes sets the "lames_lourdes" field.
func (cu *CharacterUpdate) SetLamesLourdes(i int) *CharacterUpdate {
	cu.mutation.ResetLamesLourdes()
	cu.mutation.SetLamesLourdes(i)
	return cu
}

// AddLamesLourdes adds i to the "lames_lourdes" field.
func (cu *CharacterUpdate) AddLamesLourdes(i int) *CharacterUpdate {
	cu.mutation.AddLamesLourdes(i)
	return cu
}

// SetLances sets the "lances" field.
func (cu *CharacterUpdate) SetLances(i int) *CharacterUpdate {
	cu.mutation.ResetLances()
	cu.mutation.SetLances(i)
	return cu
}

// AddLances adds i to the "lances" field.
func (cu *CharacterUpdate) AddLances(i int) *CharacterUpdate {
	cu.mutation.AddLances(i)
	return cu
}

// SetMarteaux sets the "marteaux" field.
func (cu *CharacterUpdate) SetMarteaux(i int) *CharacterUpdate {
	cu.mutation.ResetMarteaux()
	cu.mutation.SetMarteaux(i)
	return cu
}

// AddMarteaux adds i to the "marteaux" field.
func (cu *CharacterUpdate) AddMarteaux(i int) *CharacterUpdate {
	cu.mutation.AddMarteaux(i)
	return cu
}

// SetMainsNues sets the "mains_nues" field.
func (cu *CharacterUpdate) SetMainsNues(i int) *CharacterUpdate {
	cu.mutation.ResetMainsNues()
	cu.mutation.SetMainsNues(i)
	return cu
}

// AddMainsNues adds i to the "mains_nues" field.
func (cu *CharacterUpdate) AddMainsNues(i int) *CharacterUpdate {
	cu.mutation.AddMainsNues(i)
	return cu
}

// SetMysteres sets the "mysteres" field.
func (cu *CharacterUpdate) SetMysteres(i int) *CharacterUpdate {
	cu.mutation.ResetMysteres()
	cu.mutation.SetMysteres(i)
	return cu
}

// AddMysteres adds i to the "mysteres" field.
func (cu *CharacterUpdate) AddMysteres(i int) *CharacterUpdate {
	cu.mutation.AddMysteres(i)
	return cu
}

// SetExplorationSouterraine sets the "exploration_souterraine" field.
func (cu *CharacterUpdate) SetExplorationSouterraine(i int) *CharacterUpdate {
	cu.mutation.ResetExplorationSouterraine()
	cu.mutation.SetExplorationSouterraine(i)
	return cu
}

// AddExplorationSouterraine adds i to the "exploration_souterraine" field.
func (cu *CharacterUpdate) AddExplorationSouterraine(i int) *CharacterUpdate {
	cu.mutation.AddExplorationSouterraine(i)
	return cu
}

// SetIngenierie sets the "ingenierie" field.
func (cu *CharacterUpdate) SetIngenierie(i int) *CharacterUpdate {
	cu.mutation.ResetIngenierie()
	cu.mutation.SetIngenierie(i)
	return cu
}

// AddIngenierie adds i to the "ingenierie" field.
func (cu *CharacterUpdate) AddIngenierie(i int) *CharacterUpdate {
	cu.mutation.AddIngenierie(i)
	return cu
}

// SetGeographie sets the "geographie" field.
func (cu *CharacterUpdate) SetGeographie(i int) *CharacterUpdate {
	cu.mutation.ResetGeographie()
	cu.mutation.SetGeographie(i)
	return cu
}

// AddGeographie adds i to the "geographie" field.
func (cu *CharacterUpdate) AddGeographie(i int) *CharacterUpdate {
	cu.mutation.AddGeographie(i)
	return cu
}

// SetHistoire sets the "histoire" field.
func (cu *CharacterUpdate) SetHistoire(i int) *CharacterUpdate {
	cu.mutation.ResetHistoire()
	cu.mutation.SetHistoire(i)
	return cu
}

// AddHistoire adds i to the "histoire" field.
func (cu *CharacterUpdate) AddHistoire(i int) *CharacterUpdate {
	cu.mutation.AddHistoire(i)
	return cu
}

// SetFolklore sets the "folklore" field.
func (cu *CharacterUpdate) SetFolklore(i int) *CharacterUpdate {
	cu.mutation.ResetFolklore()
	cu.mutation.SetFolklore(i)
	return cu
}

// AddFolklore adds i to the "folklore" field.
func (cu *CharacterUpdate) AddFolklore(i int) *CharacterUpdate {
	cu.mutation.AddFolklore(i)
	return cu
}

// SetNature sets the "nature" field.
func (cu *CharacterUpdate) SetNature(i int) *CharacterUpdate {
	cu.mutation.ResetNature()
	cu.mutation.SetNature(i)
	return cu
}

// AddNature adds i to the "nature" field.
func (cu *CharacterUpdate) AddNature(i int) *CharacterUpdate {
	cu.mutation.AddNature(i)
	return cu
}

// SetNoblesse sets the "noblesse" field.
func (cu *CharacterUpdate) SetNoblesse(i int) *CharacterUpdate {
	cu.mutation.ResetNoblesse()
	cu.mutation.SetNoblesse(i)
	return cu
}

// AddNoblesse adds i to the "noblesse" field.
func (cu *CharacterUpdate) AddNoblesse(i int) *CharacterUpdate {
	cu.mutation.AddNoblesse(i)
	return cu
}

// SetPlans sets the "plans" field.
func (cu *CharacterUpdate) SetPlans(i int) *CharacterUpdate {
	cu.mutation.ResetPlans()
	cu.mutation.SetPlans(i)
	return cu
}

// AddPlans adds i to the "plans" field.
func (cu *CharacterUpdate) AddPlans(i int) *CharacterUpdate {
	cu.mutation.AddPlans(i)
	return cu
}

// SetReligon sets the "religon" field.
func (cu *CharacterUpdate) SetReligon(i int) *CharacterUpdate {
	cu.mutation.ResetReligon()
	cu.mutation.SetReligon(i)
	return cu
}

// AddReligon adds i to the "religon" field.
func (cu *CharacterUpdate) AddReligon(i int) *CharacterUpdate {
	cu.mutation.AddReligon(i)
	return cu
}

// SetAnatomie sets the "anatomie" field.
func (cu *CharacterUpdate) SetAnatomie(i int) *CharacterUpdate {
	cu.mutation.ResetAnatomie()
	cu.mutation.SetAnatomie(i)
	return cu
}

// AddAnatomie adds i to the "anatomie" field.
func (cu *CharacterUpdate) AddAnatomie(i int) *CharacterUpdate {
	cu.mutation.AddAnatomie(i)
	return cu
}

// SetMagieTheorique sets the "magie_theorique" field.
func (cu *CharacterUpdate) SetMagieTheorique(i int) *CharacterUpdate {
	cu.mutation.ResetMagieTheorique()
	cu.mutation.SetMagieTheorique(i)
	return cu
}

// AddMagieTheorique adds i to the "magie_theorique" field.
func (cu *CharacterUpdate) AddMagieTheorique(i int) *CharacterUpdate {
	cu.mutation.AddMagieTheorique(i)
	return cu
}

// SetEconomie sets the "economie" field.
func (cu *CharacterUpdate) SetEconomie(i int) *CharacterUpdate {
	cu.mutation.ResetEconomie()
	cu.mutation.SetEconomie(i)
	return cu
}

// AddEconomie adds i to the "economie" field.
func (cu *CharacterUpdate) AddEconomie(i int) *CharacterUpdate {
	cu.mutation.AddEconomie(i)
	return cu
}

// SetLinguistique sets the "linguistique" field.
func (cu *CharacterUpdate) SetLinguistique(i int) *CharacterUpdate {
	cu.mutation.ResetLinguistique()
	cu.mutation.SetLinguistique(i)
	return cu
}

// AddLinguistique adds i to the "linguistique" field.
func (cu *CharacterUpdate) AddLinguistique(i int) *CharacterUpdate {
	cu.mutation.AddLinguistique(i)
	return cu
}

// Mutation returns the CharacterMutation object of the builder.
func (cu *CharacterUpdate) Mutation() *CharacterMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CharacterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CharacterMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CharacterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CharacterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CharacterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CharacterUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := character.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Character.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Combat(); ok {
		if err := character.CombatValidator(v); err != nil {
			return &ValidationError{Name: "combat", err: fmt.Errorf(`ent: validator failed for field "Character.combat": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Connaissance(); ok {
		if err := character.ConnaissanceValidator(v); err != nil {
			return &ValidationError{Name: "connaissance", err: fmt.Errorf(`ent: validator failed for field "Character.connaissance": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Discretion(); ok {
		if err := character.DiscretionValidator(v); err != nil {
			return &ValidationError{Name: "discretion", err: fmt.Errorf(`ent: validator failed for field "Character.discretion": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Endurance(); ok {
		if err := character.EnduranceValidator(v); err != nil {
			return &ValidationError{Name: "endurance", err: fmt.Errorf(`ent: validator failed for field "Character.endurance": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Force(); ok {
		if err := character.ForceValidator(v); err != nil {
			return &ValidationError{Name: "force", err: fmt.Errorf(`ent: validator failed for field "Character.force": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Habilite(); ok {
		if err := character.HabiliteValidator(v); err != nil {
			return &ValidationError{Name: "habilite", err: fmt.Errorf(`ent: validator failed for field "Character.habilite": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Mouvement(); ok {
		if err := character.MouvementValidator(v); err != nil {
			return &ValidationError{Name: "mouvement", err: fmt.Errorf(`ent: validator failed for field "Character.mouvement": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Perception(); ok {
		if err := character.PerceptionValidator(v); err != nil {
			return &ValidationError{Name: "perception", err: fmt.Errorf(`ent: validator failed for field "Character.perception": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Sociabilite(); ok {
		if err := character.SociabiliteValidator(v); err != nil {
			return &ValidationError{Name: "sociabilite", err: fmt.Errorf(`ent: validator failed for field "Character.sociabilite": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Survie(); ok {
		if err := character.SurvieValidator(v); err != nil {
			return &ValidationError{Name: "survie", err: fmt.Errorf(`ent: validator failed for field "Character.survie": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Tir(); ok {
		if err := character.TirValidator(v); err != nil {
			return &ValidationError{Name: "tir", err: fmt.Errorf(`ent: validator failed for field "Character.tir": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Volonte(); ok {
		if err := character.VolonteValidator(v); err != nil {
			return &ValidationError{Name: "volonte", err: fmt.Errorf(`ent: validator failed for field "Character.volonte": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Exp(); ok {
		if err := character.ExpValidator(v); err != nil {
			return &ValidationError{Name: "exp", err: fmt.Errorf(`ent: validator failed for field "Character.exp": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ArmesHast(); ok {
		if err := character.ArmesHastValidator(v); err != nil {
			return &ValidationError{Name: "armes_hast", err: fmt.Errorf(`ent: validator failed for field "Character.armes_hast": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ArmesMoine(); ok {
		if err := character.ArmesMoineValidator(v); err != nil {
			return &ValidationError{Name: "armes_moine", err: fmt.Errorf(`ent: validator failed for field "Character.armes_moine": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ArmesDoubles(); ok {
		if err := character.ArmesDoublesValidator(v); err != nil {
			return &ValidationError{Name: "armes_doubles", err: fmt.Errorf(`ent: validator failed for field "Character.armes_doubles": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ArmesNaturelles(); ok {
		if err := character.ArmesNaturellesValidator(v); err != nil {
			return &ValidationError{Name: "armes_naturelles", err: fmt.Errorf(`ent: validator failed for field "Character.armes_naturelles": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Batons(); ok {
		if err := character.BatonsValidator(v); err != nil {
			return &ValidationError{Name: "batons", err: fmt.Errorf(`ent: validator failed for field "Character.batons": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Cimeterres(); ok {
		if err := character.CimeterresValidator(v); err != nil {
			return &ValidationError{Name: "cimeterres", err: fmt.Errorf(`ent: validator failed for field "Character.cimeterres": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Fleaux(); ok {
		if err := character.FleauxValidator(v); err != nil {
			return &ValidationError{Name: "fleaux", err: fmt.Errorf(`ent: validator failed for field "Character.fleaux": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Fouets(); ok {
		if err := character.FouetsValidator(v); err != nil {
			return &ValidationError{Name: "fouets", err: fmt.Errorf(`ent: validator failed for field "Character.fouets": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Haches(); ok {
		if err := character.HachesValidator(v); err != nil {
			return &ValidationError{Name: "haches", err: fmt.Errorf(`ent: validator failed for field "Character.haches": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Katanas(); ok {
		if err := character.KatanasValidator(v); err != nil {
			return &ValidationError{Name: "katanas", err: fmt.Errorf(`ent: validator failed for field "Character.katanas": %w`, err)}
		}
	}
	if v, ok := cu.mutation.LamesLegeres(); ok {
		if err := character.LamesLegeresValidator(v); err != nil {
			return &ValidationError{Name: "lames_legeres", err: fmt.Errorf(`ent: validator failed for field "Character.lames_legeres": %w`, err)}
		}
	}
	if v, ok := cu.mutation.LamesLourdes(); ok {
		if err := character.LamesLourdesValidator(v); err != nil {
			return &ValidationError{Name: "lames_lourdes", err: fmt.Errorf(`ent: validator failed for field "Character.lames_lourdes": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Lances(); ok {
		if err := character.LancesValidator(v); err != nil {
			return &ValidationError{Name: "lances", err: fmt.Errorf(`ent: validator failed for field "Character.lances": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Marteaux(); ok {
		if err := character.MarteauxValidator(v); err != nil {
			return &ValidationError{Name: "marteaux", err: fmt.Errorf(`ent: validator failed for field "Character.marteaux": %w`, err)}
		}
	}
	if v, ok := cu.mutation.MainsNues(); ok {
		if err := character.MainsNuesValidator(v); err != nil {
			return &ValidationError{Name: "mains_nues", err: fmt.Errorf(`ent: validator failed for field "Character.mains_nues": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Mysteres(); ok {
		if err := character.MysteresValidator(v); err != nil {
			return &ValidationError{Name: "mysteres", err: fmt.Errorf(`ent: validator failed for field "Character.mysteres": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ExplorationSouterraine(); ok {
		if err := character.ExplorationSouterraineValidator(v); err != nil {
			return &ValidationError{Name: "exploration_souterraine", err: fmt.Errorf(`ent: validator failed for field "Character.exploration_souterraine": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Ingenierie(); ok {
		if err := character.IngenierieValidator(v); err != nil {
			return &ValidationError{Name: "ingenierie", err: fmt.Errorf(`ent: validator failed for field "Character.ingenierie": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Geographie(); ok {
		if err := character.GeographieValidator(v); err != nil {
			return &ValidationError{Name: "geographie", err: fmt.Errorf(`ent: validator failed for field "Character.geographie": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Histoire(); ok {
		if err := character.HistoireValidator(v); err != nil {
			return &ValidationError{Name: "histoire", err: fmt.Errorf(`ent: validator failed for field "Character.histoire": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Folklore(); ok {
		if err := character.FolkloreValidator(v); err != nil {
			return &ValidationError{Name: "folklore", err: fmt.Errorf(`ent: validator failed for field "Character.folklore": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Nature(); ok {
		if err := character.NatureValidator(v); err != nil {
			return &ValidationError{Name: "nature", err: fmt.Errorf(`ent: validator failed for field "Character.nature": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Noblesse(); ok {
		if err := character.NoblesseValidator(v); err != nil {
			return &ValidationError{Name: "noblesse", err: fmt.Errorf(`ent: validator failed for field "Character.noblesse": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Plans(); ok {
		if err := character.PlansValidator(v); err != nil {
			return &ValidationError{Name: "plans", err: fmt.Errorf(`ent: validator failed for field "Character.plans": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Religon(); ok {
		if err := character.ReligonValidator(v); err != nil {
			return &ValidationError{Name: "religon", err: fmt.Errorf(`ent: validator failed for field "Character.religon": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Anatomie(); ok {
		if err := character.AnatomieValidator(v); err != nil {
			return &ValidationError{Name: "anatomie", err: fmt.Errorf(`ent: validator failed for field "Character.anatomie": %w`, err)}
		}
	}
	if v, ok := cu.mutation.MagieTheorique(); ok {
		if err := character.MagieTheoriqueValidator(v); err != nil {
			return &ValidationError{Name: "magie_theorique", err: fmt.Errorf(`ent: validator failed for field "Character.magie_theorique": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Economie(); ok {
		if err := character.EconomieValidator(v); err != nil {
			return &ValidationError{Name: "economie", err: fmt.Errorf(`ent: validator failed for field "Character.economie": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Linguistique(); ok {
		if err := character.LinguistiqueValidator(v); err != nil {
			return &ValidationError{Name: "linguistique", err: fmt.Errorf(`ent: validator failed for field "Character.linguistique": %w`, err)}
		}
	}
	return nil
}

func (cu *CharacterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   character.Table,
			Columns: character.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: character.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(character.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Combat(); ok {
		_spec.SetField(character.FieldCombat, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCombat(); ok {
		_spec.AddField(character.FieldCombat, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Connaissance(); ok {
		_spec.SetField(character.FieldConnaissance, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedConnaissance(); ok {
		_spec.AddField(character.FieldConnaissance, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Discretion(); ok {
		_spec.SetField(character.FieldDiscretion, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedDiscretion(); ok {
		_spec.AddField(character.FieldDiscretion, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Endurance(); ok {
		_spec.SetField(character.FieldEndurance, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedEndurance(); ok {
		_spec.AddField(character.FieldEndurance, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Force(); ok {
		_spec.SetField(character.FieldForce, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedForce(); ok {
		_spec.AddField(character.FieldForce, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Habilite(); ok {
		_spec.SetField(character.FieldHabilite, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedHabilite(); ok {
		_spec.AddField(character.FieldHabilite, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Mouvement(); ok {
		_spec.SetField(character.FieldMouvement, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMouvement(); ok {
		_spec.AddField(character.FieldMouvement, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Perception(); ok {
		_spec.SetField(character.FieldPerception, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedPerception(); ok {
		_spec.AddField(character.FieldPerception, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Sociabilite(); ok {
		_spec.SetField(character.FieldSociabilite, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedSociabilite(); ok {
		_spec.AddField(character.FieldSociabilite, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Survie(); ok {
		_spec.SetField(character.FieldSurvie, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedSurvie(); ok {
		_spec.AddField(character.FieldSurvie, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Tir(); ok {
		_spec.SetField(character.FieldTir, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedTir(); ok {
		_spec.AddField(character.FieldTir, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Volonte(); ok {
		_spec.SetField(character.FieldVolonte, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedVolonte(); ok {
		_spec.AddField(character.FieldVolonte, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Exp(); ok {
		_spec.SetField(character.FieldExp, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedExp(); ok {
		_spec.AddField(character.FieldExp, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ArmesHast(); ok {
		_spec.SetField(character.FieldArmesHast, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedArmesHast(); ok {
		_spec.AddField(character.FieldArmesHast, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ArmesMoine(); ok {
		_spec.SetField(character.FieldArmesMoine, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedArmesMoine(); ok {
		_spec.AddField(character.FieldArmesMoine, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ArmesDoubles(); ok {
		_spec.SetField(character.FieldArmesDoubles, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedArmesDoubles(); ok {
		_spec.AddField(character.FieldArmesDoubles, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ArmesNaturelles(); ok {
		_spec.SetField(character.FieldArmesNaturelles, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedArmesNaturelles(); ok {
		_spec.AddField(character.FieldArmesNaturelles, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Batons(); ok {
		_spec.SetField(character.FieldBatons, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedBatons(); ok {
		_spec.AddField(character.FieldBatons, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Cimeterres(); ok {
		_spec.SetField(character.FieldCimeterres, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCimeterres(); ok {
		_spec.AddField(character.FieldCimeterres, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Fleaux(); ok {
		_spec.SetField(character.FieldFleaux, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedFleaux(); ok {
		_spec.AddField(character.FieldFleaux, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Fouets(); ok {
		_spec.SetField(character.FieldFouets, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedFouets(); ok {
		_spec.AddField(character.FieldFouets, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Haches(); ok {
		_spec.SetField(character.FieldHaches, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedHaches(); ok {
		_spec.AddField(character.FieldHaches, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Katanas(); ok {
		_spec.SetField(character.FieldKatanas, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedKatanas(); ok {
		_spec.AddField(character.FieldKatanas, field.TypeInt, value)
	}
	if value, ok := cu.mutation.LamesLegeres(); ok {
		_spec.SetField(character.FieldLamesLegeres, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedLamesLegeres(); ok {
		_spec.AddField(character.FieldLamesLegeres, field.TypeInt, value)
	}
	if value, ok := cu.mutation.LamesLourdes(); ok {
		_spec.SetField(character.FieldLamesLourdes, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedLamesLourdes(); ok {
		_spec.AddField(character.FieldLamesLourdes, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Lances(); ok {
		_spec.SetField(character.FieldLances, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedLances(); ok {
		_spec.AddField(character.FieldLances, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Marteaux(); ok {
		_spec.SetField(character.FieldMarteaux, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMarteaux(); ok {
		_spec.AddField(character.FieldMarteaux, field.TypeInt, value)
	}
	if value, ok := cu.mutation.MainsNues(); ok {
		_spec.SetField(character.FieldMainsNues, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMainsNues(); ok {
		_spec.AddField(character.FieldMainsNues, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Mysteres(); ok {
		_spec.SetField(character.FieldMysteres, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMysteres(); ok {
		_spec.AddField(character.FieldMysteres, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ExplorationSouterraine(); ok {
		_spec.SetField(character.FieldExplorationSouterraine, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedExplorationSouterraine(); ok {
		_spec.AddField(character.FieldExplorationSouterraine, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Ingenierie(); ok {
		_spec.SetField(character.FieldIngenierie, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIngenierie(); ok {
		_spec.AddField(character.FieldIngenierie, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Geographie(); ok {
		_spec.SetField(character.FieldGeographie, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedGeographie(); ok {
		_spec.AddField(character.FieldGeographie, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Histoire(); ok {
		_spec.SetField(character.FieldHistoire, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedHistoire(); ok {
		_spec.AddField(character.FieldHistoire, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Folklore(); ok {
		_spec.SetField(character.FieldFolklore, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedFolklore(); ok {
		_spec.AddField(character.FieldFolklore, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Nature(); ok {
		_spec.SetField(character.FieldNature, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedNature(); ok {
		_spec.AddField(character.FieldNature, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Noblesse(); ok {
		_spec.SetField(character.FieldNoblesse, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedNoblesse(); ok {
		_spec.AddField(character.FieldNoblesse, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Plans(); ok {
		_spec.SetField(character.FieldPlans, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedPlans(); ok {
		_spec.AddField(character.FieldPlans, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Religon(); ok {
		_spec.SetField(character.FieldReligon, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedReligon(); ok {
		_spec.AddField(character.FieldReligon, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Anatomie(); ok {
		_spec.SetField(character.FieldAnatomie, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedAnatomie(); ok {
		_spec.AddField(character.FieldAnatomie, field.TypeInt, value)
	}
	if value, ok := cu.mutation.MagieTheorique(); ok {
		_spec.SetField(character.FieldMagieTheorique, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMagieTheorique(); ok {
		_spec.AddField(character.FieldMagieTheorique, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Economie(); ok {
		_spec.SetField(character.FieldEconomie, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedEconomie(); ok {
		_spec.AddField(character.FieldEconomie, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Linguistique(); ok {
		_spec.SetField(character.FieldLinguistique, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedLinguistique(); ok {
		_spec.AddField(character.FieldLinguistique, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{character.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CharacterUpdateOne is the builder for updating a single Character entity.
type CharacterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CharacterMutation
}

// SetName sets the "name" field.
func (cuo *CharacterUpdateOne) SetName(s string) *CharacterUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetCombat sets the "combat" field.
func (cuo *CharacterUpdateOne) SetCombat(i int) *CharacterUpdateOne {
	cuo.mutation.ResetCombat()
	cuo.mutation.SetCombat(i)
	return cuo
}

// AddCombat adds i to the "combat" field.
func (cuo *CharacterUpdateOne) AddCombat(i int) *CharacterUpdateOne {
	cuo.mutation.AddCombat(i)
	return cuo
}

// SetConnaissance sets the "connaissance" field.
func (cuo *CharacterUpdateOne) SetConnaissance(i int) *CharacterUpdateOne {
	cuo.mutation.ResetConnaissance()
	cuo.mutation.SetConnaissance(i)
	return cuo
}

// AddConnaissance adds i to the "connaissance" field.
func (cuo *CharacterUpdateOne) AddConnaissance(i int) *CharacterUpdateOne {
	cuo.mutation.AddConnaissance(i)
	return cuo
}

// SetDiscretion sets the "discretion" field.
func (cuo *CharacterUpdateOne) SetDiscretion(i int) *CharacterUpdateOne {
	cuo.mutation.ResetDiscretion()
	cuo.mutation.SetDiscretion(i)
	return cuo
}

// AddDiscretion adds i to the "discretion" field.
func (cuo *CharacterUpdateOne) AddDiscretion(i int) *CharacterUpdateOne {
	cuo.mutation.AddDiscretion(i)
	return cuo
}

// SetEndurance sets the "endurance" field.
func (cuo *CharacterUpdateOne) SetEndurance(i int) *CharacterUpdateOne {
	cuo.mutation.ResetEndurance()
	cuo.mutation.SetEndurance(i)
	return cuo
}

// AddEndurance adds i to the "endurance" field.
func (cuo *CharacterUpdateOne) AddEndurance(i int) *CharacterUpdateOne {
	cuo.mutation.AddEndurance(i)
	return cuo
}

// SetForce sets the "force" field.
func (cuo *CharacterUpdateOne) SetForce(i int) *CharacterUpdateOne {
	cuo.mutation.ResetForce()
	cuo.mutation.SetForce(i)
	return cuo
}

// AddForce adds i to the "force" field.
func (cuo *CharacterUpdateOne) AddForce(i int) *CharacterUpdateOne {
	cuo.mutation.AddForce(i)
	return cuo
}

// SetHabilite sets the "habilite" field.
func (cuo *CharacterUpdateOne) SetHabilite(i int) *CharacterUpdateOne {
	cuo.mutation.ResetHabilite()
	cuo.mutation.SetHabilite(i)
	return cuo
}

// AddHabilite adds i to the "habilite" field.
func (cuo *CharacterUpdateOne) AddHabilite(i int) *CharacterUpdateOne {
	cuo.mutation.AddHabilite(i)
	return cuo
}

// SetMouvement sets the "mouvement" field.
func (cuo *CharacterUpdateOne) SetMouvement(i int) *CharacterUpdateOne {
	cuo.mutation.ResetMouvement()
	cuo.mutation.SetMouvement(i)
	return cuo
}

// AddMouvement adds i to the "mouvement" field.
func (cuo *CharacterUpdateOne) AddMouvement(i int) *CharacterUpdateOne {
	cuo.mutation.AddMouvement(i)
	return cuo
}

// SetPerception sets the "perception" field.
func (cuo *CharacterUpdateOne) SetPerception(i int) *CharacterUpdateOne {
	cuo.mutation.ResetPerception()
	cuo.mutation.SetPerception(i)
	return cuo
}

// AddPerception adds i to the "perception" field.
func (cuo *CharacterUpdateOne) AddPerception(i int) *CharacterUpdateOne {
	cuo.mutation.AddPerception(i)
	return cuo
}

// SetSociabilite sets the "sociabilite" field.
func (cuo *CharacterUpdateOne) SetSociabilite(i int) *CharacterUpdateOne {
	cuo.mutation.ResetSociabilite()
	cuo.mutation.SetSociabilite(i)
	return cuo
}

// AddSociabilite adds i to the "sociabilite" field.
func (cuo *CharacterUpdateOne) AddSociabilite(i int) *CharacterUpdateOne {
	cuo.mutation.AddSociabilite(i)
	return cuo
}

// SetSurvie sets the "survie" field.
func (cuo *CharacterUpdateOne) SetSurvie(i int) *CharacterUpdateOne {
	cuo.mutation.ResetSurvie()
	cuo.mutation.SetSurvie(i)
	return cuo
}

// AddSurvie adds i to the "survie" field.
func (cuo *CharacterUpdateOne) AddSurvie(i int) *CharacterUpdateOne {
	cuo.mutation.AddSurvie(i)
	return cuo
}

// SetTir sets the "tir" field.
func (cuo *CharacterUpdateOne) SetTir(i int) *CharacterUpdateOne {
	cuo.mutation.ResetTir()
	cuo.mutation.SetTir(i)
	return cuo
}

// AddTir adds i to the "tir" field.
func (cuo *CharacterUpdateOne) AddTir(i int) *CharacterUpdateOne {
	cuo.mutation.AddTir(i)
	return cuo
}

// SetVolonte sets the "volonte" field.
func (cuo *CharacterUpdateOne) SetVolonte(i int) *CharacterUpdateOne {
	cuo.mutation.ResetVolonte()
	cuo.mutation.SetVolonte(i)
	return cuo
}

// AddVolonte adds i to the "volonte" field.
func (cuo *CharacterUpdateOne) AddVolonte(i int) *CharacterUpdateOne {
	cuo.mutation.AddVolonte(i)
	return cuo
}

// SetExp sets the "exp" field.
func (cuo *CharacterUpdateOne) SetExp(i int) *CharacterUpdateOne {
	cuo.mutation.ResetExp()
	cuo.mutation.SetExp(i)
	return cuo
}

// AddExp adds i to the "exp" field.
func (cuo *CharacterUpdateOne) AddExp(i int) *CharacterUpdateOne {
	cuo.mutation.AddExp(i)
	return cuo
}

// SetArmesHast sets the "armes_hast" field.
func (cuo *CharacterUpdateOne) SetArmesHast(i int) *CharacterUpdateOne {
	cuo.mutation.ResetArmesHast()
	cuo.mutation.SetArmesHast(i)
	return cuo
}

// AddArmesHast adds i to the "armes_hast" field.
func (cuo *CharacterUpdateOne) AddArmesHast(i int) *CharacterUpdateOne {
	cuo.mutation.AddArmesHast(i)
	return cuo
}

// SetArmesMoine sets the "armes_moine" field.
func (cuo *CharacterUpdateOne) SetArmesMoine(i int) *CharacterUpdateOne {
	cuo.mutation.ResetArmesMoine()
	cuo.mutation.SetArmesMoine(i)
	return cuo
}

// AddArmesMoine adds i to the "armes_moine" field.
func (cuo *CharacterUpdateOne) AddArmesMoine(i int) *CharacterUpdateOne {
	cuo.mutation.AddArmesMoine(i)
	return cuo
}

// SetArmesDoubles sets the "armes_doubles" field.
func (cuo *CharacterUpdateOne) SetArmesDoubles(i int) *CharacterUpdateOne {
	cuo.mutation.ResetArmesDoubles()
	cuo.mutation.SetArmesDoubles(i)
	return cuo
}

// AddArmesDoubles adds i to the "armes_doubles" field.
func (cuo *CharacterUpdateOne) AddArmesDoubles(i int) *CharacterUpdateOne {
	cuo.mutation.AddArmesDoubles(i)
	return cuo
}

// SetArmesNaturelles sets the "armes_naturelles" field.
func (cuo *CharacterUpdateOne) SetArmesNaturelles(i int) *CharacterUpdateOne {
	cuo.mutation.ResetArmesNaturelles()
	cuo.mutation.SetArmesNaturelles(i)
	return cuo
}

// AddArmesNaturelles adds i to the "armes_naturelles" field.
func (cuo *CharacterUpdateOne) AddArmesNaturelles(i int) *CharacterUpdateOne {
	cuo.mutation.AddArmesNaturelles(i)
	return cuo
}

// SetBatons sets the "batons" field.
func (cuo *CharacterUpdateOne) SetBatons(i int) *CharacterUpdateOne {
	cuo.mutation.ResetBatons()
	cuo.mutation.SetBatons(i)
	return cuo
}

// AddBatons adds i to the "batons" field.
func (cuo *CharacterUpdateOne) AddBatons(i int) *CharacterUpdateOne {
	cuo.mutation.AddBatons(i)
	return cuo
}

// SetCimeterres sets the "cimeterres" field.
func (cuo *CharacterUpdateOne) SetCimeterres(i int) *CharacterUpdateOne {
	cuo.mutation.ResetCimeterres()
	cuo.mutation.SetCimeterres(i)
	return cuo
}

// AddCimeterres adds i to the "cimeterres" field.
func (cuo *CharacterUpdateOne) AddCimeterres(i int) *CharacterUpdateOne {
	cuo.mutation.AddCimeterres(i)
	return cuo
}

// SetFleaux sets the "fleaux" field.
func (cuo *CharacterUpdateOne) SetFleaux(i int) *CharacterUpdateOne {
	cuo.mutation.ResetFleaux()
	cuo.mutation.SetFleaux(i)
	return cuo
}

// AddFleaux adds i to the "fleaux" field.
func (cuo *CharacterUpdateOne) AddFleaux(i int) *CharacterUpdateOne {
	cuo.mutation.AddFleaux(i)
	return cuo
}

// SetFouets sets the "fouets" field.
func (cuo *CharacterUpdateOne) SetFouets(i int) *CharacterUpdateOne {
	cuo.mutation.ResetFouets()
	cuo.mutation.SetFouets(i)
	return cuo
}

// AddFouets adds i to the "fouets" field.
func (cuo *CharacterUpdateOne) AddFouets(i int) *CharacterUpdateOne {
	cuo.mutation.AddFouets(i)
	return cuo
}

// SetHaches sets the "haches" field.
func (cuo *CharacterUpdateOne) SetHaches(i int) *CharacterUpdateOne {
	cuo.mutation.ResetHaches()
	cuo.mutation.SetHaches(i)
	return cuo
}

// AddHaches adds i to the "haches" field.
func (cuo *CharacterUpdateOne) AddHaches(i int) *CharacterUpdateOne {
	cuo.mutation.AddHaches(i)
	return cuo
}

// SetKatanas sets the "katanas" field.
func (cuo *CharacterUpdateOne) SetKatanas(i int) *CharacterUpdateOne {
	cuo.mutation.ResetKatanas()
	cuo.mutation.SetKatanas(i)
	return cuo
}

// AddKatanas adds i to the "katanas" field.
func (cuo *CharacterUpdateOne) AddKatanas(i int) *CharacterUpdateOne {
	cuo.mutation.AddKatanas(i)
	return cuo
}

// SetLamesLegeres sets the "lames_legeres" field.
func (cuo *CharacterUpdateOne) SetLamesLegeres(i int) *CharacterUpdateOne {
	cuo.mutation.ResetLamesLegeres()
	cuo.mutation.SetLamesLegeres(i)
	return cuo
}

// AddLamesLegeres adds i to the "lames_legeres" field.
func (cuo *CharacterUpdateOne) AddLamesLegeres(i int) *CharacterUpdateOne {
	cuo.mutation.AddLamesLegeres(i)
	return cuo
}

// SetLamesLourdes sets the "lames_lourdes" field.
func (cuo *CharacterUpdateOne) SetLamesLourdes(i int) *CharacterUpdateOne {
	cuo.mutation.ResetLamesLourdes()
	cuo.mutation.SetLamesLourdes(i)
	return cuo
}

// AddLamesLourdes adds i to the "lames_lourdes" field.
func (cuo *CharacterUpdateOne) AddLamesLourdes(i int) *CharacterUpdateOne {
	cuo.mutation.AddLamesLourdes(i)
	return cuo
}

// SetLances sets the "lances" field.
func (cuo *CharacterUpdateOne) SetLances(i int) *CharacterUpdateOne {
	cuo.mutation.ResetLances()
	cuo.mutation.SetLances(i)
	return cuo
}

// AddLances adds i to the "lances" field.
func (cuo *CharacterUpdateOne) AddLances(i int) *CharacterUpdateOne {
	cuo.mutation.AddLances(i)
	return cuo
}

// SetMarteaux sets the "marteaux" field.
func (cuo *CharacterUpdateOne) SetMarteaux(i int) *CharacterUpdateOne {
	cuo.mutation.ResetMarteaux()
	cuo.mutation.SetMarteaux(i)
	return cuo
}

// AddMarteaux adds i to the "marteaux" field.
func (cuo *CharacterUpdateOne) AddMarteaux(i int) *CharacterUpdateOne {
	cuo.mutation.AddMarteaux(i)
	return cuo
}

// SetMainsNues sets the "mains_nues" field.
func (cuo *CharacterUpdateOne) SetMainsNues(i int) *CharacterUpdateOne {
	cuo.mutation.ResetMainsNues()
	cuo.mutation.SetMainsNues(i)
	return cuo
}

// AddMainsNues adds i to the "mains_nues" field.
func (cuo *CharacterUpdateOne) AddMainsNues(i int) *CharacterUpdateOne {
	cuo.mutation.AddMainsNues(i)
	return cuo
}

// SetMysteres sets the "mysteres" field.
func (cuo *CharacterUpdateOne) SetMysteres(i int) *CharacterUpdateOne {
	cuo.mutation.ResetMysteres()
	cuo.mutation.SetMysteres(i)
	return cuo
}

// AddMysteres adds i to the "mysteres" field.
func (cuo *CharacterUpdateOne) AddMysteres(i int) *CharacterUpdateOne {
	cuo.mutation.AddMysteres(i)
	return cuo
}

// SetExplorationSouterraine sets the "exploration_souterraine" field.
func (cuo *CharacterUpdateOne) SetExplorationSouterraine(i int) *CharacterUpdateOne {
	cuo.mutation.ResetExplorationSouterraine()
	cuo.mutation.SetExplorationSouterraine(i)
	return cuo
}

// AddExplorationSouterraine adds i to the "exploration_souterraine" field.
func (cuo *CharacterUpdateOne) AddExplorationSouterraine(i int) *CharacterUpdateOne {
	cuo.mutation.AddExplorationSouterraine(i)
	return cuo
}

// SetIngenierie sets the "ingenierie" field.
func (cuo *CharacterUpdateOne) SetIngenierie(i int) *CharacterUpdateOne {
	cuo.mutation.ResetIngenierie()
	cuo.mutation.SetIngenierie(i)
	return cuo
}

// AddIngenierie adds i to the "ingenierie" field.
func (cuo *CharacterUpdateOne) AddIngenierie(i int) *CharacterUpdateOne {
	cuo.mutation.AddIngenierie(i)
	return cuo
}

// SetGeographie sets the "geographie" field.
func (cuo *CharacterUpdateOne) SetGeographie(i int) *CharacterUpdateOne {
	cuo.mutation.ResetGeographie()
	cuo.mutation.SetGeographie(i)
	return cuo
}

// AddGeographie adds i to the "geographie" field.
func (cuo *CharacterUpdateOne) AddGeographie(i int) *CharacterUpdateOne {
	cuo.mutation.AddGeographie(i)
	return cuo
}

// SetHistoire sets the "histoire" field.
func (cuo *CharacterUpdateOne) SetHistoire(i int) *CharacterUpdateOne {
	cuo.mutation.ResetHistoire()
	cuo.mutation.SetHistoire(i)
	return cuo
}

// AddHistoire adds i to the "histoire" field.
func (cuo *CharacterUpdateOne) AddHistoire(i int) *CharacterUpdateOne {
	cuo.mutation.AddHistoire(i)
	return cuo
}

// SetFolklore sets the "folklore" field.
func (cuo *CharacterUpdateOne) SetFolklore(i int) *CharacterUpdateOne {
	cuo.mutation.ResetFolklore()
	cuo.mutation.SetFolklore(i)
	return cuo
}

// AddFolklore adds i to the "folklore" field.
func (cuo *CharacterUpdateOne) AddFolklore(i int) *CharacterUpdateOne {
	cuo.mutation.AddFolklore(i)
	return cuo
}

// SetNature sets the "nature" field.
func (cuo *CharacterUpdateOne) SetNature(i int) *CharacterUpdateOne {
	cuo.mutation.ResetNature()
	cuo.mutation.SetNature(i)
	return cuo
}

// AddNature adds i to the "nature" field.
func (cuo *CharacterUpdateOne) AddNature(i int) *CharacterUpdateOne {
	cuo.mutation.AddNature(i)
	return cuo
}

// SetNoblesse sets the "noblesse" field.
func (cuo *CharacterUpdateOne) SetNoblesse(i int) *CharacterUpdateOne {
	cuo.mutation.ResetNoblesse()
	cuo.mutation.SetNoblesse(i)
	return cuo
}

// AddNoblesse adds i to the "noblesse" field.
func (cuo *CharacterUpdateOne) AddNoblesse(i int) *CharacterUpdateOne {
	cuo.mutation.AddNoblesse(i)
	return cuo
}

// SetPlans sets the "plans" field.
func (cuo *CharacterUpdateOne) SetPlans(i int) *CharacterUpdateOne {
	cuo.mutation.ResetPlans()
	cuo.mutation.SetPlans(i)
	return cuo
}

// AddPlans adds i to the "plans" field.
func (cuo *CharacterUpdateOne) AddPlans(i int) *CharacterUpdateOne {
	cuo.mutation.AddPlans(i)
	return cuo
}

// SetReligon sets the "religon" field.
func (cuo *CharacterUpdateOne) SetReligon(i int) *CharacterUpdateOne {
	cuo.mutation.ResetReligon()
	cuo.mutation.SetReligon(i)
	return cuo
}

// AddReligon adds i to the "religon" field.
func (cuo *CharacterUpdateOne) AddReligon(i int) *CharacterUpdateOne {
	cuo.mutation.AddReligon(i)
	return cuo
}

// SetAnatomie sets the "anatomie" field.
func (cuo *CharacterUpdateOne) SetAnatomie(i int) *CharacterUpdateOne {
	cuo.mutation.ResetAnatomie()
	cuo.mutation.SetAnatomie(i)
	return cuo
}

// AddAnatomie adds i to the "anatomie" field.
func (cuo *CharacterUpdateOne) AddAnatomie(i int) *CharacterUpdateOne {
	cuo.mutation.AddAnatomie(i)
	return cuo
}

// SetMagieTheorique sets the "magie_theorique" field.
func (cuo *CharacterUpdateOne) SetMagieTheorique(i int) *CharacterUpdateOne {
	cuo.mutation.ResetMagieTheorique()
	cuo.mutation.SetMagieTheorique(i)
	return cuo
}

// AddMagieTheorique adds i to the "magie_theorique" field.
func (cuo *CharacterUpdateOne) AddMagieTheorique(i int) *CharacterUpdateOne {
	cuo.mutation.AddMagieTheorique(i)
	return cuo
}

// SetEconomie sets the "economie" field.
func (cuo *CharacterUpdateOne) SetEconomie(i int) *CharacterUpdateOne {
	cuo.mutation.ResetEconomie()
	cuo.mutation.SetEconomie(i)
	return cuo
}

// AddEconomie adds i to the "economie" field.
func (cuo *CharacterUpdateOne) AddEconomie(i int) *CharacterUpdateOne {
	cuo.mutation.AddEconomie(i)
	return cuo
}

// SetLinguistique sets the "linguistique" field.
func (cuo *CharacterUpdateOne) SetLinguistique(i int) *CharacterUpdateOne {
	cuo.mutation.ResetLinguistique()
	cuo.mutation.SetLinguistique(i)
	return cuo
}

// AddLinguistique adds i to the "linguistique" field.
func (cuo *CharacterUpdateOne) AddLinguistique(i int) *CharacterUpdateOne {
	cuo.mutation.AddLinguistique(i)
	return cuo
}

// Mutation returns the CharacterMutation object of the builder.
func (cuo *CharacterUpdateOne) Mutation() *CharacterMutation {
	return cuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CharacterUpdateOne) Select(field string, fields ...string) *CharacterUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Character entity.
func (cuo *CharacterUpdateOne) Save(ctx context.Context) (*Character, error) {
	return withHooks[*Character, CharacterMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CharacterUpdateOne) SaveX(ctx context.Context) *Character {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CharacterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CharacterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CharacterUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := character.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Character.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Combat(); ok {
		if err := character.CombatValidator(v); err != nil {
			return &ValidationError{Name: "combat", err: fmt.Errorf(`ent: validator failed for field "Character.combat": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Connaissance(); ok {
		if err := character.ConnaissanceValidator(v); err != nil {
			return &ValidationError{Name: "connaissance", err: fmt.Errorf(`ent: validator failed for field "Character.connaissance": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Discretion(); ok {
		if err := character.DiscretionValidator(v); err != nil {
			return &ValidationError{Name: "discretion", err: fmt.Errorf(`ent: validator failed for field "Character.discretion": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Endurance(); ok {
		if err := character.EnduranceValidator(v); err != nil {
			return &ValidationError{Name: "endurance", err: fmt.Errorf(`ent: validator failed for field "Character.endurance": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Force(); ok {
		if err := character.ForceValidator(v); err != nil {
			return &ValidationError{Name: "force", err: fmt.Errorf(`ent: validator failed for field "Character.force": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Habilite(); ok {
		if err := character.HabiliteValidator(v); err != nil {
			return &ValidationError{Name: "habilite", err: fmt.Errorf(`ent: validator failed for field "Character.habilite": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Mouvement(); ok {
		if err := character.MouvementValidator(v); err != nil {
			return &ValidationError{Name: "mouvement", err: fmt.Errorf(`ent: validator failed for field "Character.mouvement": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Perception(); ok {
		if err := character.PerceptionValidator(v); err != nil {
			return &ValidationError{Name: "perception", err: fmt.Errorf(`ent: validator failed for field "Character.perception": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Sociabilite(); ok {
		if err := character.SociabiliteValidator(v); err != nil {
			return &ValidationError{Name: "sociabilite", err: fmt.Errorf(`ent: validator failed for field "Character.sociabilite": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Survie(); ok {
		if err := character.SurvieValidator(v); err != nil {
			return &ValidationError{Name: "survie", err: fmt.Errorf(`ent: validator failed for field "Character.survie": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Tir(); ok {
		if err := character.TirValidator(v); err != nil {
			return &ValidationError{Name: "tir", err: fmt.Errorf(`ent: validator failed for field "Character.tir": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Volonte(); ok {
		if err := character.VolonteValidator(v); err != nil {
			return &ValidationError{Name: "volonte", err: fmt.Errorf(`ent: validator failed for field "Character.volonte": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Exp(); ok {
		if err := character.ExpValidator(v); err != nil {
			return &ValidationError{Name: "exp", err: fmt.Errorf(`ent: validator failed for field "Character.exp": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ArmesHast(); ok {
		if err := character.ArmesHastValidator(v); err != nil {
			return &ValidationError{Name: "armes_hast", err: fmt.Errorf(`ent: validator failed for field "Character.armes_hast": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ArmesMoine(); ok {
		if err := character.ArmesMoineValidator(v); err != nil {
			return &ValidationError{Name: "armes_moine", err: fmt.Errorf(`ent: validator failed for field "Character.armes_moine": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ArmesDoubles(); ok {
		if err := character.ArmesDoublesValidator(v); err != nil {
			return &ValidationError{Name: "armes_doubles", err: fmt.Errorf(`ent: validator failed for field "Character.armes_doubles": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ArmesNaturelles(); ok {
		if err := character.ArmesNaturellesValidator(v); err != nil {
			return &ValidationError{Name: "armes_naturelles", err: fmt.Errorf(`ent: validator failed for field "Character.armes_naturelles": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Batons(); ok {
		if err := character.BatonsValidator(v); err != nil {
			return &ValidationError{Name: "batons", err: fmt.Errorf(`ent: validator failed for field "Character.batons": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Cimeterres(); ok {
		if err := character.CimeterresValidator(v); err != nil {
			return &ValidationError{Name: "cimeterres", err: fmt.Errorf(`ent: validator failed for field "Character.cimeterres": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Fleaux(); ok {
		if err := character.FleauxValidator(v); err != nil {
			return &ValidationError{Name: "fleaux", err: fmt.Errorf(`ent: validator failed for field "Character.fleaux": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Fouets(); ok {
		if err := character.FouetsValidator(v); err != nil {
			return &ValidationError{Name: "fouets", err: fmt.Errorf(`ent: validator failed for field "Character.fouets": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Haches(); ok {
		if err := character.HachesValidator(v); err != nil {
			return &ValidationError{Name: "haches", err: fmt.Errorf(`ent: validator failed for field "Character.haches": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Katanas(); ok {
		if err := character.KatanasValidator(v); err != nil {
			return &ValidationError{Name: "katanas", err: fmt.Errorf(`ent: validator failed for field "Character.katanas": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.LamesLegeres(); ok {
		if err := character.LamesLegeresValidator(v); err != nil {
			return &ValidationError{Name: "lames_legeres", err: fmt.Errorf(`ent: validator failed for field "Character.lames_legeres": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.LamesLourdes(); ok {
		if err := character.LamesLourdesValidator(v); err != nil {
			return &ValidationError{Name: "lames_lourdes", err: fmt.Errorf(`ent: validator failed for field "Character.lames_lourdes": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Lances(); ok {
		if err := character.LancesValidator(v); err != nil {
			return &ValidationError{Name: "lances", err: fmt.Errorf(`ent: validator failed for field "Character.lances": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Marteaux(); ok {
		if err := character.MarteauxValidator(v); err != nil {
			return &ValidationError{Name: "marteaux", err: fmt.Errorf(`ent: validator failed for field "Character.marteaux": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.MainsNues(); ok {
		if err := character.MainsNuesValidator(v); err != nil {
			return &ValidationError{Name: "mains_nues", err: fmt.Errorf(`ent: validator failed for field "Character.mains_nues": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Mysteres(); ok {
		if err := character.MysteresValidator(v); err != nil {
			return &ValidationError{Name: "mysteres", err: fmt.Errorf(`ent: validator failed for field "Character.mysteres": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ExplorationSouterraine(); ok {
		if err := character.ExplorationSouterraineValidator(v); err != nil {
			return &ValidationError{Name: "exploration_souterraine", err: fmt.Errorf(`ent: validator failed for field "Character.exploration_souterraine": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Ingenierie(); ok {
		if err := character.IngenierieValidator(v); err != nil {
			return &ValidationError{Name: "ingenierie", err: fmt.Errorf(`ent: validator failed for field "Character.ingenierie": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Geographie(); ok {
		if err := character.GeographieValidator(v); err != nil {
			return &ValidationError{Name: "geographie", err: fmt.Errorf(`ent: validator failed for field "Character.geographie": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Histoire(); ok {
		if err := character.HistoireValidator(v); err != nil {
			return &ValidationError{Name: "histoire", err: fmt.Errorf(`ent: validator failed for field "Character.histoire": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Folklore(); ok {
		if err := character.FolkloreValidator(v); err != nil {
			return &ValidationError{Name: "folklore", err: fmt.Errorf(`ent: validator failed for field "Character.folklore": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Nature(); ok {
		if err := character.NatureValidator(v); err != nil {
			return &ValidationError{Name: "nature", err: fmt.Errorf(`ent: validator failed for field "Character.nature": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Noblesse(); ok {
		if err := character.NoblesseValidator(v); err != nil {
			return &ValidationError{Name: "noblesse", err: fmt.Errorf(`ent: validator failed for field "Character.noblesse": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Plans(); ok {
		if err := character.PlansValidator(v); err != nil {
			return &ValidationError{Name: "plans", err: fmt.Errorf(`ent: validator failed for field "Character.plans": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Religon(); ok {
		if err := character.ReligonValidator(v); err != nil {
			return &ValidationError{Name: "religon", err: fmt.Errorf(`ent: validator failed for field "Character.religon": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Anatomie(); ok {
		if err := character.AnatomieValidator(v); err != nil {
			return &ValidationError{Name: "anatomie", err: fmt.Errorf(`ent: validator failed for field "Character.anatomie": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.MagieTheorique(); ok {
		if err := character.MagieTheoriqueValidator(v); err != nil {
			return &ValidationError{Name: "magie_theorique", err: fmt.Errorf(`ent: validator failed for field "Character.magie_theorique": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Economie(); ok {
		if err := character.EconomieValidator(v); err != nil {
			return &ValidationError{Name: "economie", err: fmt.Errorf(`ent: validator failed for field "Character.economie": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Linguistique(); ok {
		if err := character.LinguistiqueValidator(v); err != nil {
			return &ValidationError{Name: "linguistique", err: fmt.Errorf(`ent: validator failed for field "Character.linguistique": %w`, err)}
		}
	}
	return nil
}

func (cuo *CharacterUpdateOne) sqlSave(ctx context.Context) (_node *Character, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   character.Table,
			Columns: character.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: character.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Character.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, character.FieldID)
		for _, f := range fields {
			if !character.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != character.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(character.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Combat(); ok {
		_spec.SetField(character.FieldCombat, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCombat(); ok {
		_spec.AddField(character.FieldCombat, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Connaissance(); ok {
		_spec.SetField(character.FieldConnaissance, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedConnaissance(); ok {
		_spec.AddField(character.FieldConnaissance, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Discretion(); ok {
		_spec.SetField(character.FieldDiscretion, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedDiscretion(); ok {
		_spec.AddField(character.FieldDiscretion, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Endurance(); ok {
		_spec.SetField(character.FieldEndurance, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedEndurance(); ok {
		_spec.AddField(character.FieldEndurance, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Force(); ok {
		_spec.SetField(character.FieldForce, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedForce(); ok {
		_spec.AddField(character.FieldForce, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Habilite(); ok {
		_spec.SetField(character.FieldHabilite, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedHabilite(); ok {
		_spec.AddField(character.FieldHabilite, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Mouvement(); ok {
		_spec.SetField(character.FieldMouvement, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMouvement(); ok {
		_spec.AddField(character.FieldMouvement, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Perception(); ok {
		_spec.SetField(character.FieldPerception, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedPerception(); ok {
		_spec.AddField(character.FieldPerception, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Sociabilite(); ok {
		_spec.SetField(character.FieldSociabilite, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedSociabilite(); ok {
		_spec.AddField(character.FieldSociabilite, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Survie(); ok {
		_spec.SetField(character.FieldSurvie, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedSurvie(); ok {
		_spec.AddField(character.FieldSurvie, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Tir(); ok {
		_spec.SetField(character.FieldTir, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedTir(); ok {
		_spec.AddField(character.FieldTir, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Volonte(); ok {
		_spec.SetField(character.FieldVolonte, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedVolonte(); ok {
		_spec.AddField(character.FieldVolonte, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Exp(); ok {
		_spec.SetField(character.FieldExp, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedExp(); ok {
		_spec.AddField(character.FieldExp, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ArmesHast(); ok {
		_spec.SetField(character.FieldArmesHast, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedArmesHast(); ok {
		_spec.AddField(character.FieldArmesHast, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ArmesMoine(); ok {
		_spec.SetField(character.FieldArmesMoine, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedArmesMoine(); ok {
		_spec.AddField(character.FieldArmesMoine, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ArmesDoubles(); ok {
		_spec.SetField(character.FieldArmesDoubles, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedArmesDoubles(); ok {
		_spec.AddField(character.FieldArmesDoubles, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ArmesNaturelles(); ok {
		_spec.SetField(character.FieldArmesNaturelles, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedArmesNaturelles(); ok {
		_spec.AddField(character.FieldArmesNaturelles, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Batons(); ok {
		_spec.SetField(character.FieldBatons, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedBatons(); ok {
		_spec.AddField(character.FieldBatons, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Cimeterres(); ok {
		_spec.SetField(character.FieldCimeterres, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCimeterres(); ok {
		_spec.AddField(character.FieldCimeterres, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Fleaux(); ok {
		_spec.SetField(character.FieldFleaux, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedFleaux(); ok {
		_spec.AddField(character.FieldFleaux, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Fouets(); ok {
		_spec.SetField(character.FieldFouets, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedFouets(); ok {
		_spec.AddField(character.FieldFouets, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Haches(); ok {
		_spec.SetField(character.FieldHaches, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedHaches(); ok {
		_spec.AddField(character.FieldHaches, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Katanas(); ok {
		_spec.SetField(character.FieldKatanas, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedKatanas(); ok {
		_spec.AddField(character.FieldKatanas, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.LamesLegeres(); ok {
		_spec.SetField(character.FieldLamesLegeres, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedLamesLegeres(); ok {
		_spec.AddField(character.FieldLamesLegeres, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.LamesLourdes(); ok {
		_spec.SetField(character.FieldLamesLourdes, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedLamesLourdes(); ok {
		_spec.AddField(character.FieldLamesLourdes, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Lances(); ok {
		_spec.SetField(character.FieldLances, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedLances(); ok {
		_spec.AddField(character.FieldLances, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Marteaux(); ok {
		_spec.SetField(character.FieldMarteaux, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMarteaux(); ok {
		_spec.AddField(character.FieldMarteaux, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.MainsNues(); ok {
		_spec.SetField(character.FieldMainsNues, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMainsNues(); ok {
		_spec.AddField(character.FieldMainsNues, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Mysteres(); ok {
		_spec.SetField(character.FieldMysteres, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMysteres(); ok {
		_spec.AddField(character.FieldMysteres, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ExplorationSouterraine(); ok {
		_spec.SetField(character.FieldExplorationSouterraine, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedExplorationSouterraine(); ok {
		_spec.AddField(character.FieldExplorationSouterraine, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Ingenierie(); ok {
		_spec.SetField(character.FieldIngenierie, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIngenierie(); ok {
		_spec.AddField(character.FieldIngenierie, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Geographie(); ok {
		_spec.SetField(character.FieldGeographie, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedGeographie(); ok {
		_spec.AddField(character.FieldGeographie, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Histoire(); ok {
		_spec.SetField(character.FieldHistoire, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedHistoire(); ok {
		_spec.AddField(character.FieldHistoire, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Folklore(); ok {
		_spec.SetField(character.FieldFolklore, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedFolklore(); ok {
		_spec.AddField(character.FieldFolklore, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Nature(); ok {
		_spec.SetField(character.FieldNature, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedNature(); ok {
		_spec.AddField(character.FieldNature, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Noblesse(); ok {
		_spec.SetField(character.FieldNoblesse, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedNoblesse(); ok {
		_spec.AddField(character.FieldNoblesse, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Plans(); ok {
		_spec.SetField(character.FieldPlans, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedPlans(); ok {
		_spec.AddField(character.FieldPlans, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Religon(); ok {
		_spec.SetField(character.FieldReligon, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedReligon(); ok {
		_spec.AddField(character.FieldReligon, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Anatomie(); ok {
		_spec.SetField(character.FieldAnatomie, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedAnatomie(); ok {
		_spec.AddField(character.FieldAnatomie, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.MagieTheorique(); ok {
		_spec.SetField(character.FieldMagieTheorique, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMagieTheorique(); ok {
		_spec.AddField(character.FieldMagieTheorique, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Economie(); ok {
		_spec.SetField(character.FieldEconomie, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedEconomie(); ok {
		_spec.AddField(character.FieldEconomie, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Linguistique(); ok {
		_spec.SetField(character.FieldLinguistique, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedLinguistique(); ok {
		_spec.AddField(character.FieldLinguistique, field.TypeInt, value)
	}
	_node = &Character{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{character.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
