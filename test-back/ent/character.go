// Code generated by ent, DO NOT EDIT.

package ent

import (
	"draconia/ent/character"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Character is the model entity for the Character schema.
type Character struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Combat holds the value of the "combat" field.
	Combat int `json:"combat,omitempty"`
	// Connaissance holds the value of the "connaissance" field.
	Connaissance int `json:"connaissance,omitempty"`
	// Discretion holds the value of the "discretion" field.
	Discretion int `json:"discretion,omitempty"`
	// Endurance holds the value of the "endurance" field.
	Endurance int `json:"endurance,omitempty"`
	// Force holds the value of the "force" field.
	Force int `json:"force,omitempty"`
	// Habilite holds the value of the "habilite" field.
	Habilite int `json:"habilite,omitempty"`
	// Mouvement holds the value of the "mouvement" field.
	Mouvement int `json:"mouvement,omitempty"`
	// Perception holds the value of the "perception" field.
	Perception int `json:"perception,omitempty"`
	// Sociabilite holds the value of the "sociabilite" field.
	Sociabilite int `json:"sociabilite,omitempty"`
	// Survie holds the value of the "survie" field.
	Survie int `json:"survie,omitempty"`
	// Tir holds the value of the "tir" field.
	Tir int `json:"tir,omitempty"`
	// Volonte holds the value of the "volonte" field.
	Volonte int `json:"volonte,omitempty"`
	// Exp holds the value of the "exp" field.
	Exp int `json:"exp,omitempty"`
	// ArmesHast holds the value of the "armes_hast" field.
	ArmesHast int `json:"armes_hast,omitempty"`
	// ArmesMoine holds the value of the "armes_moine" field.
	ArmesMoine int `json:"armes_moine,omitempty"`
	// ArmesDoubles holds the value of the "armes_doubles" field.
	ArmesDoubles int `json:"armes_doubles,omitempty"`
	// ArmesNaturelles holds the value of the "armes_naturelles" field.
	ArmesNaturelles int `json:"armes_naturelles,omitempty"`
	// Batons holds the value of the "batons" field.
	Batons int `json:"batons,omitempty"`
	// Cimeterres holds the value of the "cimeterres" field.
	Cimeterres int `json:"cimeterres,omitempty"`
	// Fleaux holds the value of the "fleaux" field.
	Fleaux int `json:"fleaux,omitempty"`
	// Fouets holds the value of the "fouets" field.
	Fouets int `json:"fouets,omitempty"`
	// Haches holds the value of the "haches" field.
	Haches int `json:"haches,omitempty"`
	// Katanas holds the value of the "katanas" field.
	Katanas int `json:"katanas,omitempty"`
	// LamesLegeres holds the value of the "lames_legeres" field.
	LamesLegeres int `json:"lames_legeres,omitempty"`
	// LamesLourdes holds the value of the "lames_lourdes" field.
	LamesLourdes int `json:"lames_lourdes,omitempty"`
	// Lances holds the value of the "lances" field.
	Lances int `json:"lances,omitempty"`
	// Marteaux holds the value of the "marteaux" field.
	Marteaux int `json:"marteaux,omitempty"`
	// MainsNues holds the value of the "mains_nues" field.
	MainsNues int `json:"mains_nues,omitempty"`
	// Mysteres holds the value of the "mysteres" field.
	Mysteres int `json:"mysteres,omitempty"`
	// ExplorationSouterraine holds the value of the "exploration_souterraine" field.
	ExplorationSouterraine int `json:"exploration_souterraine,omitempty"`
	// Ingenierie holds the value of the "ingenierie" field.
	Ingenierie int `json:"ingenierie,omitempty"`
	// Geographie holds the value of the "geographie" field.
	Geographie int `json:"geographie,omitempty"`
	// Histoire holds the value of the "histoire" field.
	Histoire int `json:"histoire,omitempty"`
	// Folklore holds the value of the "folklore" field.
	Folklore int `json:"folklore,omitempty"`
	// Nature holds the value of the "nature" field.
	Nature int `json:"nature,omitempty"`
	// Noblesse holds the value of the "noblesse" field.
	Noblesse int `json:"noblesse,omitempty"`
	// Plans holds the value of the "plans" field.
	Plans int `json:"plans,omitempty"`
	// Religon holds the value of the "religon" field.
	Religon int `json:"religon,omitempty"`
	// Anatomie holds the value of the "anatomie" field.
	Anatomie int `json:"anatomie,omitempty"`
	// MagieTheorique holds the value of the "magie_theorique" field.
	MagieTheorique int `json:"magie_theorique,omitempty"`
	// Economie holds the value of the "economie" field.
	Economie int `json:"economie,omitempty"`
	// Linguistique holds the value of the "linguistique" field.
	Linguistique int `json:"linguistique,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Character) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case character.FieldCombat, character.FieldConnaissance, character.FieldDiscretion, character.FieldEndurance, character.FieldForce, character.FieldHabilite, character.FieldMouvement, character.FieldPerception, character.FieldSociabilite, character.FieldSurvie, character.FieldTir, character.FieldVolonte, character.FieldExp, character.FieldArmesHast, character.FieldArmesMoine, character.FieldArmesDoubles, character.FieldArmesNaturelles, character.FieldBatons, character.FieldCimeterres, character.FieldFleaux, character.FieldFouets, character.FieldHaches, character.FieldKatanas, character.FieldLamesLegeres, character.FieldLamesLourdes, character.FieldLances, character.FieldMarteaux, character.FieldMainsNues, character.FieldMysteres, character.FieldExplorationSouterraine, character.FieldIngenierie, character.FieldGeographie, character.FieldHistoire, character.FieldFolklore, character.FieldNature, character.FieldNoblesse, character.FieldPlans, character.FieldReligon, character.FieldAnatomie, character.FieldMagieTheorique, character.FieldEconomie, character.FieldLinguistique:
			values[i] = new(sql.NullInt64)
		case character.FieldName:
			values[i] = new(sql.NullString)
		case character.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Character", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Character fields.
func (c *Character) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case character.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case character.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case character.FieldCombat:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field combat", values[i])
			} else if value.Valid {
				c.Combat = int(value.Int64)
			}
		case character.FieldConnaissance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field connaissance", values[i])
			} else if value.Valid {
				c.Connaissance = int(value.Int64)
			}
		case character.FieldDiscretion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discretion", values[i])
			} else if value.Valid {
				c.Discretion = int(value.Int64)
			}
		case character.FieldEndurance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field endurance", values[i])
			} else if value.Valid {
				c.Endurance = int(value.Int64)
			}
		case character.FieldForce:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field force", values[i])
			} else if value.Valid {
				c.Force = int(value.Int64)
			}
		case character.FieldHabilite:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field habilite", values[i])
			} else if value.Valid {
				c.Habilite = int(value.Int64)
			}
		case character.FieldMouvement:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mouvement", values[i])
			} else if value.Valid {
				c.Mouvement = int(value.Int64)
			}
		case character.FieldPerception:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field perception", values[i])
			} else if value.Valid {
				c.Perception = int(value.Int64)
			}
		case character.FieldSociabilite:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sociabilite", values[i])
			} else if value.Valid {
				c.Sociabilite = int(value.Int64)
			}
		case character.FieldSurvie:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field survie", values[i])
			} else if value.Valid {
				c.Survie = int(value.Int64)
			}
		case character.FieldTir:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tir", values[i])
			} else if value.Valid {
				c.Tir = int(value.Int64)
			}
		case character.FieldVolonte:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field volonte", values[i])
			} else if value.Valid {
				c.Volonte = int(value.Int64)
			}
		case character.FieldExp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exp", values[i])
			} else if value.Valid {
				c.Exp = int(value.Int64)
			}
		case character.FieldArmesHast:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field armes_hast", values[i])
			} else if value.Valid {
				c.ArmesHast = int(value.Int64)
			}
		case character.FieldArmesMoine:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field armes_moine", values[i])
			} else if value.Valid {
				c.ArmesMoine = int(value.Int64)
			}
		case character.FieldArmesDoubles:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field armes_doubles", values[i])
			} else if value.Valid {
				c.ArmesDoubles = int(value.Int64)
			}
		case character.FieldArmesNaturelles:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field armes_naturelles", values[i])
			} else if value.Valid {
				c.ArmesNaturelles = int(value.Int64)
			}
		case character.FieldBatons:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field batons", values[i])
			} else if value.Valid {
				c.Batons = int(value.Int64)
			}
		case character.FieldCimeterres:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cimeterres", values[i])
			} else if value.Valid {
				c.Cimeterres = int(value.Int64)
			}
		case character.FieldFleaux:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fleaux", values[i])
			} else if value.Valid {
				c.Fleaux = int(value.Int64)
			}
		case character.FieldFouets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fouets", values[i])
			} else if value.Valid {
				c.Fouets = int(value.Int64)
			}
		case character.FieldHaches:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field haches", values[i])
			} else if value.Valid {
				c.Haches = int(value.Int64)
			}
		case character.FieldKatanas:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field katanas", values[i])
			} else if value.Valid {
				c.Katanas = int(value.Int64)
			}
		case character.FieldLamesLegeres:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lames_legeres", values[i])
			} else if value.Valid {
				c.LamesLegeres = int(value.Int64)
			}
		case character.FieldLamesLourdes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lames_lourdes", values[i])
			} else if value.Valid {
				c.LamesLourdes = int(value.Int64)
			}
		case character.FieldLances:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lances", values[i])
			} else if value.Valid {
				c.Lances = int(value.Int64)
			}
		case character.FieldMarteaux:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field marteaux", values[i])
			} else if value.Valid {
				c.Marteaux = int(value.Int64)
			}
		case character.FieldMainsNues:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mains_nues", values[i])
			} else if value.Valid {
				c.MainsNues = int(value.Int64)
			}
		case character.FieldMysteres:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mysteres", values[i])
			} else if value.Valid {
				c.Mysteres = int(value.Int64)
			}
		case character.FieldExplorationSouterraine:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exploration_souterraine", values[i])
			} else if value.Valid {
				c.ExplorationSouterraine = int(value.Int64)
			}
		case character.FieldIngenierie:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ingenierie", values[i])
			} else if value.Valid {
				c.Ingenierie = int(value.Int64)
			}
		case character.FieldGeographie:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field geographie", values[i])
			} else if value.Valid {
				c.Geographie = int(value.Int64)
			}
		case character.FieldHistoire:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field histoire", values[i])
			} else if value.Valid {
				c.Histoire = int(value.Int64)
			}
		case character.FieldFolklore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field folklore", values[i])
			} else if value.Valid {
				c.Folklore = int(value.Int64)
			}
		case character.FieldNature:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nature", values[i])
			} else if value.Valid {
				c.Nature = int(value.Int64)
			}
		case character.FieldNoblesse:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field noblesse", values[i])
			} else if value.Valid {
				c.Noblesse = int(value.Int64)
			}
		case character.FieldPlans:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plans", values[i])
			} else if value.Valid {
				c.Plans = int(value.Int64)
			}
		case character.FieldReligon:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field religon", values[i])
			} else if value.Valid {
				c.Religon = int(value.Int64)
			}
		case character.FieldAnatomie:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field anatomie", values[i])
			} else if value.Valid {
				c.Anatomie = int(value.Int64)
			}
		case character.FieldMagieTheorique:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field magie_theorique", values[i])
			} else if value.Valid {
				c.MagieTheorique = int(value.Int64)
			}
		case character.FieldEconomie:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field economie", values[i])
			} else if value.Valid {
				c.Economie = int(value.Int64)
			}
		case character.FieldLinguistique:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field linguistique", values[i])
			} else if value.Valid {
				c.Linguistique = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Character.
// Note that you need to call Character.Unwrap() before calling this method if this Character
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Character) Update() *CharacterUpdateOne {
	return NewCharacterClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Character entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Character) Unwrap() *Character {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Character is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Character) String() string {
	var builder strings.Builder
	builder.WriteString("Character(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("combat=")
	builder.WriteString(fmt.Sprintf("%v", c.Combat))
	builder.WriteString(", ")
	builder.WriteString("connaissance=")
	builder.WriteString(fmt.Sprintf("%v", c.Connaissance))
	builder.WriteString(", ")
	builder.WriteString("discretion=")
	builder.WriteString(fmt.Sprintf("%v", c.Discretion))
	builder.WriteString(", ")
	builder.WriteString("endurance=")
	builder.WriteString(fmt.Sprintf("%v", c.Endurance))
	builder.WriteString(", ")
	builder.WriteString("force=")
	builder.WriteString(fmt.Sprintf("%v", c.Force))
	builder.WriteString(", ")
	builder.WriteString("habilite=")
	builder.WriteString(fmt.Sprintf("%v", c.Habilite))
	builder.WriteString(", ")
	builder.WriteString("mouvement=")
	builder.WriteString(fmt.Sprintf("%v", c.Mouvement))
	builder.WriteString(", ")
	builder.WriteString("perception=")
	builder.WriteString(fmt.Sprintf("%v", c.Perception))
	builder.WriteString(", ")
	builder.WriteString("sociabilite=")
	builder.WriteString(fmt.Sprintf("%v", c.Sociabilite))
	builder.WriteString(", ")
	builder.WriteString("survie=")
	builder.WriteString(fmt.Sprintf("%v", c.Survie))
	builder.WriteString(", ")
	builder.WriteString("tir=")
	builder.WriteString(fmt.Sprintf("%v", c.Tir))
	builder.WriteString(", ")
	builder.WriteString("volonte=")
	builder.WriteString(fmt.Sprintf("%v", c.Volonte))
	builder.WriteString(", ")
	builder.WriteString("exp=")
	builder.WriteString(fmt.Sprintf("%v", c.Exp))
	builder.WriteString(", ")
	builder.WriteString("armes_hast=")
	builder.WriteString(fmt.Sprintf("%v", c.ArmesHast))
	builder.WriteString(", ")
	builder.WriteString("armes_moine=")
	builder.WriteString(fmt.Sprintf("%v", c.ArmesMoine))
	builder.WriteString(", ")
	builder.WriteString("armes_doubles=")
	builder.WriteString(fmt.Sprintf("%v", c.ArmesDoubles))
	builder.WriteString(", ")
	builder.WriteString("armes_naturelles=")
	builder.WriteString(fmt.Sprintf("%v", c.ArmesNaturelles))
	builder.WriteString(", ")
	builder.WriteString("batons=")
	builder.WriteString(fmt.Sprintf("%v", c.Batons))
	builder.WriteString(", ")
	builder.WriteString("cimeterres=")
	builder.WriteString(fmt.Sprintf("%v", c.Cimeterres))
	builder.WriteString(", ")
	builder.WriteString("fleaux=")
	builder.WriteString(fmt.Sprintf("%v", c.Fleaux))
	builder.WriteString(", ")
	builder.WriteString("fouets=")
	builder.WriteString(fmt.Sprintf("%v", c.Fouets))
	builder.WriteString(", ")
	builder.WriteString("haches=")
	builder.WriteString(fmt.Sprintf("%v", c.Haches))
	builder.WriteString(", ")
	builder.WriteString("katanas=")
	builder.WriteString(fmt.Sprintf("%v", c.Katanas))
	builder.WriteString(", ")
	builder.WriteString("lames_legeres=")
	builder.WriteString(fmt.Sprintf("%v", c.LamesLegeres))
	builder.WriteString(", ")
	builder.WriteString("lames_lourdes=")
	builder.WriteString(fmt.Sprintf("%v", c.LamesLourdes))
	builder.WriteString(", ")
	builder.WriteString("lances=")
	builder.WriteString(fmt.Sprintf("%v", c.Lances))
	builder.WriteString(", ")
	builder.WriteString("marteaux=")
	builder.WriteString(fmt.Sprintf("%v", c.Marteaux))
	builder.WriteString(", ")
	builder.WriteString("mains_nues=")
	builder.WriteString(fmt.Sprintf("%v", c.MainsNues))
	builder.WriteString(", ")
	builder.WriteString("mysteres=")
	builder.WriteString(fmt.Sprintf("%v", c.Mysteres))
	builder.WriteString(", ")
	builder.WriteString("exploration_souterraine=")
	builder.WriteString(fmt.Sprintf("%v", c.ExplorationSouterraine))
	builder.WriteString(", ")
	builder.WriteString("ingenierie=")
	builder.WriteString(fmt.Sprintf("%v", c.Ingenierie))
	builder.WriteString(", ")
	builder.WriteString("geographie=")
	builder.WriteString(fmt.Sprintf("%v", c.Geographie))
	builder.WriteString(", ")
	builder.WriteString("histoire=")
	builder.WriteString(fmt.Sprintf("%v", c.Histoire))
	builder.WriteString(", ")
	builder.WriteString("folklore=")
	builder.WriteString(fmt.Sprintf("%v", c.Folklore))
	builder.WriteString(", ")
	builder.WriteString("nature=")
	builder.WriteString(fmt.Sprintf("%v", c.Nature))
	builder.WriteString(", ")
	builder.WriteString("noblesse=")
	builder.WriteString(fmt.Sprintf("%v", c.Noblesse))
	builder.WriteString(", ")
	builder.WriteString("plans=")
	builder.WriteString(fmt.Sprintf("%v", c.Plans))
	builder.WriteString(", ")
	builder.WriteString("religon=")
	builder.WriteString(fmt.Sprintf("%v", c.Religon))
	builder.WriteString(", ")
	builder.WriteString("anatomie=")
	builder.WriteString(fmt.Sprintf("%v", c.Anatomie))
	builder.WriteString(", ")
	builder.WriteString("magie_theorique=")
	builder.WriteString(fmt.Sprintf("%v", c.MagieTheorique))
	builder.WriteString(", ")
	builder.WriteString("economie=")
	builder.WriteString(fmt.Sprintf("%v", c.Economie))
	builder.WriteString(", ")
	builder.WriteString("linguistique=")
	builder.WriteString(fmt.Sprintf("%v", c.Linguistique))
	builder.WriteByte(')')
	return builder.String()
}

// Characters is a parsable slice of Character.
type Characters []*Character

func (c Characters) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
